#+TITLE: Emacs Configuration
#+PROPERTY: header-args:elisp :tangle ./init.el :mkdirp yes

#+begin_src elisp
  ;; init.el -*- lexical-binding: t; -*-
#+end_src

* Basic stuff

*** Identity
#+begin_src elisp
  (setq user-full-name "nuxsh"
        user-mail-address "nuxshed@gmail.com")
#+end_src

  change the defaults because some of them suck
#+begin_src elisp
  (setq-default require-final-newline t
                vc-follow-symlinks)

  (setq undo-limit 80000000            ; moar undo
      auto-save-default t            ; who knows what could happen?
      truncate-string-ellipsis "…")   ; prettier ellipsis

  ;; scrolling related settings
  (setq scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        smooth-scroll-margin 1)

  (defalias 'yes-or-no-p 'y-or-n-p) ;; y/n is shorter than yes/no
#+end_src

UI debloating
#+begin_src elisp
  (setq inhibit-startup-echo-area-message t
        inhibit-startup-message t)
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar
  (scroll-bar-mode -1)        ; Disable the scrollbar
#+end_src

set custom file and load it
#+begin_src elisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src

some useful minor modes
#+begin_src elisp
  (global-display-line-numbers-mode) ;; line numbers
  (global-subword-mode) ;; iterate through camelCase
  (electric-pair-mode) ;; autopairs
  (recentf-mode) ;; recent files
#+end_src

configure indentation
#+begin_src elisp
  (setq-default indent-tabs-mode nil
      tab-width 2)
  (setq indent-line-function 'insert-tab)
#+end_src

* Packages

setting up use-package
#+begin_src elisp
  ;; init package sources
  (require 'package)
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("melpa" . "http://melpa.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Meow
#+begin_src elisp
        (use-package meow
          :config
          (defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
          (meow-setup)
          (meow-global-mode 1))
#+end_src

** Consult
#+begin_src elisp
  (use-package consult)
#+end_src

** Vertico
#+begin_src elisp
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-cycle t))
#+end_src

orderless adds fuzzy finding
#+begin_src elisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

marginalia adds descriptions and stuff to your minibuffer
#+begin_src elisp
  (use-package marginalia
    :init (marginalia-mode))
#+end_src

** Company-mode
#+begin_src elisp
  (use-package company
    :bind (:map company-active-map
          ("<tab>" . company-select-next)))

  (use-package company-statistics
    :hook (company-mode . company-statistics-mode))

  (use-package company-quickhelp
    :hook (company-mode . company-quickhelp-mode))

  (use-package company-box
    :hook (company-mode . company-box-mode)
    :config
    (setq company-box-scrollbar nil))

  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Vterm
eshell is nice but I prefer vterm
#+begin_src elisp
  (use-package vterm
    :ensure t)
#+end_src

** Which-key
#+begin_src elisp
  (use-package which-key
    :config (which-key-mode)
    (which-key-setup-side-window-bottom)
    (setq which-key-idle-delay 0.1))
#+end_src

** Languages
some major modes to improve language support
#+begin_src elisp
  (use-package nix-mode)
  (use-package lua-mode)
  (use-package markdown-mode)
#+end_src

** Flycheck
#+begin_src elisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :config
    (setq flycheck-emacs-lisp-load-path 'inherit)
    (setq flycheck-idle-change-delay 1.0)
          (setq-local flycheck-emacs-lisp-initialize-packages t)
          (setq-local flycheck-emacs-lisp-package-user-dir package-user-dir)
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+end_src

** Projectile
#+begin_src elisp
  (use-package projectile
    :config (projectile-mode 1))
#+end_src

** Magit
#+begin_src elisp
  (use-package magit)
#+end_src

* UI

** Basic Tweaks
#+begin_src elisp
  (set-window-margins (selected-window) 10 10)
#+end_src

** Theme
#+begin_src elisp
  (use-package doom-themes
    :config
    (load-theme 'doom-nord t))
#+end_src

** Modeline
#+begin_src elisp
  (use-package mood-line
    :ensure t
    :config
    (mood-line-mode))
#+end_src

* Org-mode
#+begin_src elisp
  (use-package org-contrib)
  (use-package org-bullets
    :after org
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))
#+end_src

make org-mode prettier
#+begin_src elisp
  (defun org/prettify-set ()
    (interactive)
    (setq prettify-symbols-alist
        '(("#+begin_src" . "")
          ("#+BEGIN_SRC" . "")
          ("#+end_src" . "")
          ("#+END_SRC" . "")
          ("#+begin_example" . "")
          ("#+BEGIN_EXAMPLE" . "")
          ("#+end_example" . "")
          ("#+END_EXAMPLE" . "")
          ("#+results:" . "")
          ("#+RESULTS:" . "")
          ("#+begin_quote" . "❝")
          ("#+BEGIN_QUOTE" . "❝")
          ("#+end_quote" . "❞")
          ("#+END_QUOTE" . "❞")
          ("[ ]" . "☐")
          ("[-]" . "◯")
          ("[X]" . "☑"))))
  (add-hook 'org-mode-hook 'org/prettify-set)

  (defun prog/prettify-set ()
    (interactive)
    (setq prettify-symbols-alist
        '(("lambda" . "λ")
          ("->" . "→")
          ("<-" . "←")
          ("<=" . "≤")
          (">=" . "≥")
          ("!=" . "≠")
          ("~=" . "≃")
          ("=~" . "≃"))))
  (add-hook 'prog-mode-hook 'prog/prettify-set)

  (global-prettify-symbols-mode)
#+end_src

set up org-babel for elisp
#+begin_src elisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)))
#+end_src

* Literate config
#+begin_src elisp
  (defun org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/dotfiles/config/emacs/config.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  ;; tangle on save
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src



the end
#+begin_src elisp
  ;; init.el ends here
#+end_src
